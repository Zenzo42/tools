#!/usr/bin/env python
#   This file is part of nexdatas - Tango Server for NeXus data writer
#
#    Copyright (C) 2012-2013 DESY, Jan Kotanski <jkotan@mail.desy.de>
#
#    nexdatas is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nexdatas is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nexdatas.  If not, see <http://www.gnu.org/licenses/>.
## \package ndtstools tools for ndts
## \file nxscreate_client_ds
# datasource creator

""" CLIENT datasource creator """

import sys


from optparse import OptionParser


from nxstools.nxsxml import (XMLFile, NDSource)
from nxstools.nxsdevicetools import (
    storeDataSource, checkServer, generateDeviceNames)

PYTANGO = False
try:
    import PyTango
    PYTANGO = True
except:
    pass



## creates CLIENT datasource file
# \param name device name
# \param directory output file directory
# \param fileprefix file name prefix
def createDataSource(name, directory, fileprefix, server):
    df = XMLFile("%s/%s%s.ds.xml" % (directory, fileprefix, name))  
    sr = NDSource(df)
    sr.initClient(name, name)


    if server:
        xml = df.prettyPrint()
        storeDataSource(name, xml, server)
    else: 
        df.dump()
           


def createParser():
    ## usage example
    usage = "usage: %prog [options] [name1] [name2]"
    ## option parser
    parser = OptionParser(usage=usage)

    parser.add_option("-p", "--device-prefix", type="string",
                      help="device prefix, i.e. exp_c",
                      dest="device", default="")
    parser.add_option("-f", "--first",
                      help="first index",
                      dest="first", default="1")
    parser.add_option("-l", "--last",
                      help="last index",
                      dest="last", default=None)

    parser.add_option("-d", "--directory", type="string",
                      help="output datasource directory",
                      dest="directory", default=".")
    parser.add_option("-x", "--file-prefix", type="string",
                      help="file prefix, i.e. counter",
                      dest="file", default="")

    parser.add_option("-b", "--database",  action="store_true",
                      default=False, dest="database", 
                      help="store components in Configuration Server database")

    parser.add_option("-r", "--server", dest="server", 
                      help="configuration server device name")

    return parser


## the main function
def main():

    parser = createParser()
    (options, args) = parser.parse_args()

    if options.database and not options.server:
        if not PYTANGO:
            print  >> sys.stderr, "CollCompCreator No PyTango installed\n"
            parser.print_help()
            sys.exit(255)
            
        options.server = checkServer()
        if not options.server:
            parser.print_help()
            print ""
            sys.exit(0)

    if options.database:    
        print "CONFIG SERVER:", options.server
    else: 
        print "OUTPUT DIRECTORY:", options.directory
            

    aargs = []
    if options.device.strip():
        try:    
            first = int(options.first)
        except:
            print  >> sys.stderr, "ClientDSCreator: Invalid --first parameter\n"
            parser.print_help()
            sys.exit(255)


        try:    
            last = int(options.last)
        except:
            print  >> sys.stderr, "ClientDSCreator: Invalid --last parameter\n"
            parser.print_help()
            sys.exit(255)

        aargs = generateDeviceNames(options.device, first, last)
        
    args += aargs
    if not len(args):
        parser.print_help()
        sys.exit(255)

    for name in args:
        if not options.database:
            print "CREATING: %s%s.ds.xml" % (options.file, name)
        else:
            print "STORING: %s" % (name)
        createDataSource(name, options.directory, options.file, 
                         options.server if options.database else None)
    
        


if __name__ == "__main__":
    main()
