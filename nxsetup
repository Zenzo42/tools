#!/usr/bin/python
import os
import sys
import socket
from nxstools import nxssetup
from optparse import OptionParser


hostname = socket.gethostname()

#
# all SardanaHosts and DataBaseHosts should be known
#
knownHosts = {
    'hasdelay': {'beamline': 'delay', 'masterHost': 'hasdelay',
                 'user': 'delayusr', 'dbname': 'nxsconfig'},
    'hasmfmc': {'beamline': 'fmc', 'masterHost': 'hasmfmc',
                'user': 'delayusr', 'dbname': 'nxsconfig'},
    'hasmlqj': {'beamline': 'lqj', 'masterHost': 'hasmlqj',
                'user': 'lqjuser', 'dbname': 'nxsconfig'},
    'haso111n': {'beamline': 'p09', 'masterHost': 'haso111n',
                 'user': 'tnunez', 'dbname': 'nxsconfig'},
    'haso111tb': {'beamline': 'p09', 'masterHost': 'haso111tb',
                  'user': 'tnunez', 'dbname': 'nxsconfig'},
    'haso113b': {'beamline': 'p09', 'masterHost': 'haso113b',
                 'user': 'blume', 'dbname': 'nxsconfig'},
    'haso113u': {'beamline': 'p09', 'masterHost': 'haso113u',
                 'user': 'blume', 'dbname': 'nxsconfig'},
    'hastodt': {'beamline': 'p09', 'masterHost': 'hastodt',
                'user': 'kracht', 'dbname': 'nxsconfig'},
    'haso228k': {'beamline': 'p09', 'masterHost': 'haso228k',
                 'user': 'jkotan', 'dbname': 'nxsconfig'},
    'has6117b': {'beamline': 'p02', 'masterHost': 'has6117b',
                 'user': 'p02user', 'dbname': 'nxsconfig'},
    'haspecsicl4': {'beamline': 'p02', 'masterHost': 'haspecsicl4',
                    'user': 'lacluser', 'dbname': 'nxsconfig'},
    'haspp01eh1': {'beamline': 'p01', 'masterHost': 'haspp01eh1',
                   'user': 'p01user', 'dbname': 'nxsconfig'},
    'haspp01eh2': {'beamline': 'p01', 'masterHost': 'haspp01eh2',
                   'user': 'p01user', 'dbname': 'nxsconfig'},
    'haspp01eh3': {'beamline': 'p01', 'masterHost': 'haspp01eh3',
                   'user': 'p01user', 'dbname': 'nxsconfig'},
    'haspp02ch1a': {'beamline': 'p02', 'masterHost': 'haspp02ch1a',
                    'user': 'p02user', 'dbname': 'nxsconfig'},
    'haspp02ch1': {'beamline': 'p02', 'masterHost': 'haspp02ch1',
                   'user': 'p02user', 'dbname': 'nxsconfig'},
    'haspp02ch2': {'beamline': 'p02', 'masterHost': 'haspp02ch2',
                   'user': 'p02user', 'dbname': 'nxsconfig'},
    'haspp03': {'beamline': 'p03', 'masterHost': 'haspp03',
                'user': 'p03user', 'dbname': 'nxsconfig'},
    'haspp03nano': {'beamline': 'p03nano', 'masterHost': 'haspp03nano',
                    'user': 'p03nano', 'dbname': 'nxsconfig'},
    'haspp04exp1': {'beamline': 'p04', 'masterHost': 'haspp04exp1',
                    'user': 'p04user', 'dbname': 'nxsconfig'},
    'haspp04exp2': {'beamline': 'p04', 'masterHost': 'haspp04exp2',
                    'user': 'p04user', 'dbname': 'nxsconfig'},
    'haspp06ctrl': {'beamline': 'p06', 'masterHost': 'haspp06ctrl',
                    'user': 'p06user', 'dbname': 'nxsconfig'},
    'haspp06nc1': {'beamline': 'p06', 'masterHost': 'haspp06nc1',
                   'user': 'p06user', 'dbname': 'nxsconfig'},
    'haspp06mc01': {'beamline': 'p06', 'masterHost': 'haspp06mc01',
                    'user': 'p06user', 'dbname': 'nxsconfig'},
    'hasp029rack': {'beamline': 'p06', 'masterHost': 'hasp029rack',
                    'user': 'p06user', 'dbname': 'nxsconfig'},
    'haspp07eh2': {'beamline': 'p07', 'masterHost': 'haspp07eh2',
                   'user': 'p07user', 'dbname': 'nxsconfig'},
    'haspp08': {'beamline': 'p08', 'masterHost': 'haspp08',
                'user': 'p08user', 'dbname': 'nxsconfig'},
    'haspp09': {'beamline': 'p09', 'masterHost': 'haspp09',
                'user': 'p09user', 'dbname': 'nxsconfig'},
    'haspp09mag': {'beamline': 'p09', 'masterHost': 'haspp09mag',
                   'user': 'p09user', 'dbname': 'nxsconfig'},
    'haspp09dif': {'beamline': 'p09', 'masterHost': 'haspp09dif',
                   'user': 'p09user', 'dbname': 'nxsconfig'},
    'haspp09haxps': {'beamline': 'p09', 'masterHost': 'haspp09maxps',
                     'user': 'p09haxps', 'dbname': 'nxsconfig'},
    'haspp10e1': {'beamline': 'p10', 'masterHost': 'haspp10e1',
                  'user': 'p10user', 'dbname': 'nxsconfig'},
    'haspp10e2': {'beamline': 'p10', 'masterHost': 'haspp10e2',
                  'user': 'p10user', 'dbname': 'nxsconfig'},
    'haspp10lcx': {'beamline': 'p10', 'masterHost': 'haspp10lcx',
                   'user': 'p10user', 'dbname': 'nxsconfig'},
    'haspp10lab': {'beamline': 'p10', 'masterHost': 'haspp10lab',
                   'user': 'p10user', 'dbname': 'nxsconfig'},
    'haspp11oh': {'beamline': 'p11', 'masterHost': 'haspp11oh',
                  'user': 'p11user', 'dbname': 'nxsconfig'},
    'haspp11sardana': {'beamline': 'p11', 'masterHost': 'haspp11sardana',
                       'user': 'p11user', 'dbname': 'nxsconfig'},
    'haspp11user02': {'beamline': 'p11', 'masterHost': 'haspp11user02',
                      'user': 'p11user', 'dbname': 'nxsconfig'},
    'haspp21lab': {'beamline': 'p21', 'masterHost': 'haspp21lab',
                   'user': 'p21user', 'dbname': 'nxsconfig'},
    'haso107klx': {'beamline': 'p09', 'masterHost': 'haso107klx',
                   'user': 'kracht', 'dbname': 'nxsconfig'},
    'haso107d1': {'beamline': 'p09', 'masterHost': 'haso107d1',
                  'user': 'kracht', 'dbname': 'nxsconfig'},
    'hascmexp': {'beamline': 'cmexp', 'masterHost': 'hascmexp',
                 'user': 'cmexp', 'dbname': 'nxsconfig'},
    'hasnp64': {'beamline': 'p64', 'masterHost': 'hasnp64',
                'user': 'p64user', 'dbname': 'nxsconfig'},
    'hasnp64oh': {'beamline': 'p64', 'masterHost': 'hasnp64oh',
                  'user': 'p64user', 'dbname': 'nxsconfig'},
    'hasnp65': {'beamline': 'p65', 'masterHost': 'hasnp65',
                'user': 'p65user', 'dbname': 'nxsconfig'},
    'hasnp66': {'beamline': 'p66', 'masterHost': 'hasnp66',
                'user': 'p66user', 'dbname': 'nxsconfig'},
    'hzgpp07eh1': {'beamline': 'p07', 'masterHost': 'hzgpp07eh1',
                   'user': 'p07user', 'dbname': 'nxsconfig'},
    'hzgpp07eh3': {'beamline': 'p07', 'masterHost': 'hzgpp07eh3',
                   'user': 'p07user', 'dbname': 'nxsconfig'},
    'hzgpp07eh4': {'beamline': 'p07', 'masterHost': 'hzgpp07eh4',
                   'user': 'p07user', 'dbname': 'nxsconfig'},
}


## creates parser
def createParser(user):
    if hostname in knownHosts.keys():
        usage = "\n\n %prog -x [-j <jsonsettings>]" + \
                " [<server_class1> <server_class2> ... ] " + \
                "\n\n %prog -r [<server_class1> <server_class2> ... ] " + \
                "\n\n %prog -p -n newname -o oldname " + \
                "[<server_class1> <server_class2> ... ] " + \
                "\n\n  (%s is known, -b %s, -m %s -u %s -d %s ) \n" % (
                    hostname,
                    knownHosts[hostname]['beamline'],
                    knownHosts[hostname]['masterHost'],
                    user,
                    knownHosts[hostname]['dbname'],
                )
    else:
        usage = "\n\n %prog -x -b <beamline> -m <masterHost> " + \
                "-u <local_user> -d <dbname> [-j jsonsettings] " + \
                " [<server_class1> <server_class2> ... ] " + \
                "\n\n %prog -r [<server_class1> <server_class2> ... ] "
    parser = OptionParser(usage=usage)
    parser.add_option("-b", "--beamline", action="store", type="string",
                      dest="beamline", help="name of the beamline")
    parser.add_option("-m", "--masterHost", action="store", type="string",
                      dest="masterHost", help="the host that stores the Mg")
    parser.add_option("-u", "--user", action="store", type="string",
                      dest="user", help="the local user")
    parser.add_option("-d", "--database", action="store", type="string",
                      dest="dbname", help="the database name")
    parser.add_option("-j", "--csjson", action="store", type="string",
                      dest="csjson",
                      help="JSONSettings for the configuration server")
    parser.add_option("-x", "--execute", action="store_true",
                      default=False, dest="execute",
                      help="setup servers action")
    parser.add_option("-o", "--oldname", action="store", type="string",
                      dest="oldname", help="old property name")
    parser.add_option("-n", "--newname", action="store", type="string",
                      dest="newname", help="new property name")
    parser.add_option("-r", "--restart", action="store_true",
                      default=False, dest="restart",
                      help="restart server(s) action")
    parser.add_option("-a", "--add-recorder-path", action="store",
                      type="string", dest="recpath",
                      help="add recorder path")
    parser.add_option("-p", "--move-prop", action="store_true",
                      default=False, dest="moveprop",
                      help="change property name")
    return parser


## the main function
def main():
    local_user = None
    if os.path.isfile('/home/etc/local_user'):
        local_user = open('/home/etc/local_user').readline()
    elif hostname in knownHosts.keys():
        local_user = knownHosts["user"]

    parser = createParser(local_user)
    (options, args) = parser.parse_args()

    if not options.execute and not options.restart and not options.recpath \
       and not options.moveprop:
        parser.print_help()
        print("\n")
        sys.exit(255)

    if options.execute:
        if options.beamline is None:
            if hostname in knownHosts.keys():
                options.beamline = knownHosts[hostname]['beamline']
            else:
                parser.print_help()
                print("\n")
                sys.exit(255)
        if options.masterHost is None:
            if hostname in knownHosts.keys():
                options.masterHost = knownHosts[hostname]['masterHost']
            else:
                parser.print_help()
                sys.exit(255)

        if options.user is None:
            if hostname in knownHosts.keys():
                options.user = local_user
            else:
                parser.print_help()
                sys.exit(255)

        if options.dbname is None:
            if hostname in knownHosts.keys():
                options.dbname = knownHosts[hostname]['dbname']
            else:
                parser.print_help()
                sys.exit(255)

        setUp = nxssetup.SetUp()

        if not args or "NXSDataWriter" in args:
            if not setUp.createDataWriter(
                    beamline=options.beamline,
                    masterHost=options.masterHost):
                print("startup failed to create the nexus data writer")
                sys.exit(255)

        if options.csjson:
            jsonsettings = options.csjson
        else:
            jsonsettings = '{"host":"localhost","db":"%s",' % options.dbname \
                + ' "read_default_file":"/home/%s/.my.cnf",' % options.user \
                + ' "use_unicode":true}'

        if not args or "NXSConfigServer" in args:
            if not setUp.createConfigServer(
                    beamline=options.beamline,
                    masterHost=options.masterHost,
                    jsonsettings=jsonsettings):
                print("startup failed to create the nexus config server")
                sys.exit(255)

        if not args or "NXSRecSelector" in args:
            if not setUp.createSelector(
                    beamline=options.beamline,
                    masterHost=options.masterHost):
                print("startup failed to create the nexus selector server")
                sys.exit(255)

    if options.restart:
        setUp = nxssetup.SetUp()
        servers = args if args else [
            "NXSConfigServer", "NXSRecSelector", "NXSDataWriter"]
        for server in servers:
            setUp.restartServer(server)

    if options.recpath:
        setUp = nxssetup.SetUp()
        if setUp.changeRecorderPath(options.recpath):
            setUp.restartServer("MacroServer")

    if options.moveprop:
        if not options.newname or not options.oldname or not args:
            parser.print_help()
            sys.exit(255)
        servers = args or []
        setUp = nxssetup.SetUp()
        for server in servers:
            if setUp.changePropertyName(
                    server, options.oldname, options.newname):
                setUp.restartServer(server)


if __name__ == "__main__":
    main()
